x<-1
print(x)
x
msg<-"hello"
msg
print(msg)
x<-
print(x)
x<-5
x
print(x)
x<_1:20
x<-1:20
x
x<-c(0.5,0.6)
x
x<-9:29
x
x<-c(i,3i)
x<-c(1+i,2+3i)
i<-sqrt(-1)
y<-c(1.7,'a')
y
y<-c(true,2)
y<-c(TRUE,2)
y<-c(TRUE,2)
y
x<-1:6
class(x)
as.numeric(x)
class(x)
as.logical(x)
as.character(x)
as.complex(x)
y=complex(x)
y
y<-as.complex(x)
y
i
i^2
clear()
m<-matix(nrow=2, ncol= 3)
m<-matrix(nrow=2, ncol= 3)
m
dim(m)
attributes(m)
View(m)
View(m)
View(m)
m<-1:10
dim(m)<-c(2,5)
m
x<-1:3
y <- 10:12
cbind(x,y)
rbind(x,y)
x<-list(1,"a",TRUE, 1 + 4i)
x
i
x <- factor(c("yes", "yes", "no", "yes", "no"))
x
table(x)
unclass(x)
x <- factor(c("yes", "yes", "no", "yes", "no")),
x <- factor(c("yes", "yes", "no", "yes", "no"), levels = c("yes", "no"))
x
x<-data.frame(foo = 1:4, bar = c(T,T, F, F))
x
nrow(x)
ncol(x)
x<-1:3
names(x)
names(x)<- c("foo", "bar", "norf")
x
x <- list(a=1, b=2, c=3)
x
m <- matrix(1:4, nrow = 2, ncol = 2)
dimnames(m) <- list (c("a", "b"), c("c", "d"))
m
x <- c("a". "b", "c", "c", "d", "a")
x[1]
x <- c("a". "b", "c", "c", "d", "a")
x <- c("a", "b", "c", "c", "d", "a")
x[1]
x[2]
x[1:4]
x[x> "a"]
u<-x> "a"
u
x[u]
x<-matrix(1:6,2,3)
x[1,2]
x
x[2,1]
x[1]
x[1,]
x[,2]
x[2,1, drop=FALSE]
x[,2, drop=FALSE]
x<- list(foo=1:4,bar = 0.6)
x[1]
x[[1]]
x$bar
x$foo
x[["bar"]]
x<- list(foo=1:4,bar = 0.6, baz= "hello")
x[c(1,3)]
x<- list(foo=1:4,bar = 0.6, baz= "hello")
name<-"foo"
x[[name]]
x$name
x$foo
x<-list(a = list(10, 12, 14), b = c(3.14, 2.81))
x[[c(1,3)]]
x[[c(2,2)]]
x[c(1,2)]
x<- c(1, 2, NA, 4, NA, 5)
bad <- is.na(x)
x[!bad]
x<- c(1, 2, NA, 4, NA, 5)
y<- c("a", "b", NA, "d", NA, "f")
good <- complete.cases(x,y)
good
y<- c("a", "b", NA, "d", NA, "NA")
good <- complete.cases(x,y)
good
x = (1, 2, 3, 4, 4, 4, 5, 5, 5, 6, 7, 9)
x <- (1, 2, 3, 4, 4, 4, 5, 5, 5, 6, 7, 9)
x <- c(1, 2, 3, 4, 4, 4, 5, 5, 5, 6, 7, 9)
x
length(x)
sum(==4)
sum(x==4)
sum(x>4)
sum(length(x>4)
)
sum(length(x>4))
sum(6)
length(x>4)
x <- rnorm(100)
y <- x + rnorm(100)
par(las = 1)
plot(x, y)
x <- rnorm(100)
y <- x + rnorm(100)
par(las = 1)
plot(x, y)
par(las = 2)
plot(x, y)
par(las = 2)
plot(x,y)
x <- rnorm(100)
y <- x + rnorm(100)
par(las = 1)
plot(x, y)
par(las = 2)
plot(x,y)
par(las = 3)
plot(x,y)
par(las = 4)
par(pch = 12, col = 3)
plot(x,y)
par(phc = 1, col = 1)
par(pch = 1, col = 1)
plot(x,y)
x1 <- rnorm(10)
y1 <- rnorm(10)
points(x1, y1, col = "red")
?text
text(0,0, "ORIGIN, BITCHES")
lines()
lines(x,y)
pdf(file = "testRplot.pdf")
x <- rnorm(100)
hist(x)
dev.off()
library(lattice)
library(nlme)
xyplot(distance ~ age | Subject, data = Orthodont)
xyplot(distance ~ age | Subject, data = Orthodont, type=b)
xyplot(distance ~ age | Subject, data = Orthodont, type= "b")
points()
points(x,y)
axis()
gzfile()
png()
?png
quartx()
quartz()
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?expression
set.seed(1)
rpois(5, 2)
library(XML)
fileURL <= "http://espn.go.com/nfl/team/_/name/bal/baltimore-ravens"
doc <- htmlTreeParse(fileUrl, useInternal = TRUE)
scores <- xpathSApply(doc, "//li@[class = 'score']", xmlValue )
teams <- xpathSApply(doc, "//li@[class = 'team-name']", xmlValue )
scores
teams
fileURL <- "http://espn.go.com/nfl/team/_/name/bal/baltimore-ravens"
doc <- htmlTreeParse(fileUrl, useInternal = TRUE)
scores <- xpathSApply(doc, "//li@[class = 'score']", xmlValue )
teams <- xpathSApply(doc, "//li@[class = 'team-name']", xmlValue )
scores
teams
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
class(xyplot(weight ~ Time | Diet, BodyWeight))
?lattice
panel.abline()
?print.trellis()
?trellis.par.set()
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
g <- ggplot(movies, aes(votes, rating))
print(g)
g <- ggplot(movies, aes(votes, rating))+
geom_point()
print(g)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
?data.frame
df <- data.frame(x = c(1,2,3), y-b = c(4,5,6))
df <- data.frame(x = c(1,2,3), y = c(4,5,6))
colnames(df, "x", "b-y")
colnames(df, "x", "h")
?colnames
colnames(df)<- c("x", "y-b")
df$y-b
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
library(dplyr)
Baltimore <- subset(NEI, fips == "24510")
grouped <- group_by(Baltimore, year)
totals <- summarize(grouped, sum = sum(Emissions))
?qnorm(0.95)
qnorm(0.95)
qnorm(0.95)*.4-12
mean <- mean(data)
data <- c(8, 3, -1, 2, 5)
mean <- mean(data)
standard_dev <- sd(data)
std_error <- standard_dev/sqrt(length(data))
?t.test()
t.test(data)
t.test(data, alternative = "two.sided")
n <- 9
mu <- 1100
sigma <- 30
std_error <- sigma/sqrt(n)
?power.t.test
tval <- qt(0.975, n-1)
interval <- c(1, -1)*tval*std_error + mu
?binom
?pbinom
p_3_or_more <- pbinom(2, size = 4 , prob = 0.5 )
old <- choose(4,3)*0.5^4 +choose(4,4)*0.5^4
p_3_or_more <- pbinom(2, size = 4 , prob = 0.5, lower.tail = F)
rate <- 10/1787
danger <- 0.01
lambda0100 <- 100*danger
lambda0100 <- 1787*danger
lambda0 <- 1787*danger
?ppois()
ppois(9, lambda0, lower.tail = F)
ppois(9, lambda = lambda0, lower.tail = F)
1 - ppois(9, lambda = lambda0, lower.tail = F)
ppois(11, lambda = lambda0)
ppois(9, lambda = lambda0)
danger <- 0.01
rate <- 10/1787
lambda0 <- 1787*danger
ppois(9, lambda = lambda0)
ppois(11, lambda = lambda0)
ppois(10, lambda = lambda0)
m1 <- -3
s1 <- 1.5
n1 <- 9
m2 <- 1
s2 <- 1.8
n1 <- 9
var_est <- ((n1-1)*s1^2+(n2-1)*s2^2))/(n1+n2-2)
var_est <- ((n1-1)*s1^2+(n2-1)*s2^2)/(n1+n2-2)
var_est <- ((n1-1)*s1^2+(n2-1)*s2^2)/(n1+n2-2)
n2 <- 9
var_est <- ((n1-1)*s1^2+(n2-1)*s2^2)/(n1+n2-2)
sigma <- sqrt(var_est)
st_err <- sigma_est((1/n1)+(1/n2))^0.5
sigma_est <- sqrt(var_est)
st_err <- sigma_est*((1/n1)+(1/n2))^0.5
?qt
?t.test
?qt
m <- m1-m2
tscore <- (m - 0)/st_err
tscore <- (m - 0)/st_err
m <- m2-m1
tscore <- (m - 0)/st_err
prob <- 2*(tscore, 16, lower.tail = F)
prob <- 2*pt(tscore, 16, lower.tail = F)
prob
prob*100
?power.t.test
power.t.test(n = 100, delta = 0.01, sd = 0.04, sig.level = 0.05,
power = NULL,
type = c("paired"),
alternative = c("one.sided"),
strict = FALSE)
power.t.test(n = NULL, delta = 0.01, sd = 0.04, sig.level = 0.05,
power = 0.9,
type = c("paired"),
alternative = c("one.sided"),
strict = FALSE)
n = 288
sd = 12
K1 = 44
K2 = 42.04
K <- K1-K2
var_est <- ((n-1)*sd^2+(n-1)*sd^2)/(n+n-2)
sigma_est <- sqrt(var_est)
st_err <- sigma_est*((1/n)+(1/n))^0.5
tscore <- (K - 0)/st_err
prob <- 2*pt(tscore, 2*n-2, lower.tail = F)
?scale_x_datetime
library(ggplot)
library(ggplot2)
?scale_x_datetime
ggplot(MPI, aes(x = as.POSIXct(interval, format = "%H:%M"), y = mean)) +
geom_line()+
xlab("Time of Day")+
scale_x_datetime(hour)
source('~/.active-rstudio-document', echo=TRUE)
?labels
setwd("~/Documents/My Study/Coursera/Reproducable Research/Attempt2/RepData_PeerAssessment1")
# Unzip file
activityzip <- "activity.zip"
unzip(activityzip)
# Load csv file
activity <- read.csv("activity.csv")
# Look at csv file
str(activity)
# Change the date variable to a datetime rather than a factor.
activity$date <- as.Date(as.character(activity$date))
#Change the interval variable to a 24 hr time
activity$interval <- formatC(activity$interval, flag=0, width=4)
activity$interval <- strftime(strptime(activity$interval, "%H%M"), "%H:%M")
library(dplyr)
library(ggplot2)
# Remove rows with missing values
activityNARM <- activity[complete.cases(activity),]
## Use group_by to create a data frame containing the total number of steps for
## each day.
DateGroups<- group_by(activityNARM, date)
TotalSteps <- summarise(DateGroups, sum = sum(steps))
# Create a histogram of the steps data.
ggplot(data = TotalSteps, aes(x=sum))+
geom_histogram(binwidth = 1000, color = "red", fill = "white")+
xlab("Steps Daily")+
ylab("Frequency")
# Find the mean and median number of steps per day.
MeanSteps <- mean(TotalSteps$sum)
paste("The mean number of steps per day is approximately", round(MeanSteps, 2), sep =" ")
MedianSteps <- median(TotalSteps$sum)
paste("The median number of steps per day is", MedianSteps, sep =" ")
IntervalGroups <- group_by(activityNARM, interval)
MPI <- summarise(IntervalGroups,
mean = mean(steps, na.rm = T))
## Create a time series graph of this information.
ggplot(MPI, aes(x = as.POSIXct(interval, format = "%H:%M"), y = mean)) +
geom_line()+
xlab("Time of Day")+
scale_x_datetime(labels = date_format("%H:%M"))
## Find the time interval that corresponds to the highest mean.
time <- subset(MPI, mean == max(mean))[1,1]
paste("The time interval corresponding to the highest mean is", time, sep =" ")
t2m(2355)
hours <- trunc(activity$interval  / 100)
hours <- trunc(as.integer(activity$interval)/100)
setwd("~/Documents/My Study/Coursera/Reproducable Research/Attempt2/RepData_PeerAssessment1")
activity <- read.csv("activity.csv")
str(activity)
activity$date <- as.Date(as.character(activity$date))
activity$interval <- formatC(activity$interval, flag=0, width=4)
str(activity$interval)
activity <- read.csv("activity.csv")
hours <- trunc(activity$interval/100)
mins <- 100 * (activity$interval/100 - hours)
activity$interval <- hours*60 + mins
View(activity)
library(dplyr)
library(ggplot2)
# Remove rows with missing values
activityNARM <- activity[complete.cases(activity),]
## Use group_by to create a data frame containing the total number of steps for
## each day.
DateGroups<- group_by(activityNARM, date)
TotalSteps <- summarise(DateGroups, sum = sum(steps))
# Create a histogram of the steps data.
ggplot(data = TotalSteps, aes(x=sum))+
geom_histogram(binwidth = 1000, color = "red", fill = "white")+
xlab("Steps Daily")+
ylab("Frequency")
# Find the mean and median number of steps per day.
MeanSteps <- mean(TotalSteps$sum)
paste("The mean number of steps per day is approximately", round(MeanSteps, 2), sep =" ")
MedianSteps <- median(TotalSteps$sum)
paste("The median number of steps per day is", MedianSteps, sep =" ")
source('~/.active-rstudio-document', echo=TRUE)
paste("The time interval corresponding to the highest mean is", trunc(time/60),":",time-trunc(time/60)*60, sep =" ")
paste("The time interval corresponding to the highest mean is", time, "minutes since midnight or", trunc(time/60),":",time-trunc(time/60)*60, am, sep =" ")
paste("The time interval corresponding to the highest mean is", time, "minutes since midnight or", trunc(time/60),":",time-trunc(time/60)*60, "am", sep =" ")
?sep
?paste
